/ ===== ARCHIVO 1: firestore.rules =====
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Funciones auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
    
    function isManager() {
      return request.auth.token.role == 'manager';
    }
    
    function isOwner(email) {
      return request.auth.token.email == email;
    }
    
    function isUserActive() {
      return request.auth != null && 
        (!('active' in request.auth.token) || request.auth.token.active == true);
    }

    // Reglas para usuarios/perfiles
    match /users/{userId} {
      // Lectura: todos pueden leer información básica
      allow read: if isAuthenticated();
      
      // Creación: solo admins
      allow create: if isAuthenticated() && isAdmin();
      
      // Actualización: el usuario puede editar su perfil, admins todo
      allow update: if isAuthenticated() && (
        isOwner(resource.data.email) || isAdmin()
      );
      
      // Eliminación: solo admins
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Reglas para inventario
    match /inventario/{itemId} {
      allow read: if isAuthenticated() && isUserActive();
      allow create, update: if isAuthenticated() && 
        (isAdmin() || isManager());
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Reglas para proveedores
    match /providers/{providerId} {
      allow read: if isAuthenticated() && isUserActive();
      allow create, update, delete: if isAuthenticated() && isAdmin();
    }

    // Reglas para historial
    match /historial/{historialId} {
      allow read: if isAuthenticated() && isUserActive();
      allow create: if isAuthenticated() && isUserActive();
      allow update, delete: if false; // Historial inmutable
    }

    // Reglas para notas/chat
    match /notas/{noteId} {
      allow read, create: if isAuthenticated() && isUserActive();
      allow update: if isAuthenticated() && 
        request.auth.token.email == resource.data.usuario;
      allow delete: if isAuthenticated() && (isAdmin() || isManager());
    }

    // Reglas para turnos
    match /shifts/{shiftId} {
      allow read: if isAuthenticated() && isUserActive();
      allow create, update: if isAuthenticated() && (isAdmin() || isManager());
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Reglas para notas de turno
    match /shift_notes/{noteId} {
      allow read: if isAuthenticated() && isUserActive();
      allow create: if isAuthenticated() && isUserActive();
      allow update: if isAuthenticated() && 
        request.auth.token.email == resource.data.author;
      allow delete: if isAuthenticated() && (isAdmin() || isManager());
    }
  }
}
